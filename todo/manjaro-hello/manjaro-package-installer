#!/usr/bin/env bash


DIALOG="zenity --info"
QUESTION="zenity --question"
WINICON="--window-icon=/usr/share/icons/hicolor/scalable/apps/manjaro.svg"
OK="--ok-label=Ok"
CANCEL="--cancel-label=Cancel"
TITLE="Manjaro Package Installer"

# package array
packageList=(leafpad mousepad gimp atom sublime-text-dev gnome-mplayer parole
             inkscape krita ranger neovim vim nano emacs gtop vlc blender empathy
             xclock s-tui slurm cava mpd ncmpcpp glances thunderbird geary evolution
             mutt latte-dock plank docky cairo-dock spotify nicotine+ lollypop
             lxmusic-gtk3 rhythmbox gnome-music clementine simplescreenrecorder
             obs-studio guvcview peek kdenlive openshot lwks libre-office-fresh
             abiword calligra etcher mintstick-git unetbootin etcher-cli totem
             hexchat pidgin weechat irssi gpick gcolor2 xfburn simpleburn smplayer
             k3b deluge transmission-gtk transmission-cli qbittorrent firefox
             google-chrome opera chromium vivaldi termite rxvt-unicode tilix
             terminator tilda xfce4-terminal gnome-terminal lxterminmanjaro-gtk3
             terminology roxterm sakura konsole steam discord dropbox audacity
             pamac-aur gnome-software vitualbox codeblocks gnome-builder gedit
             catfish gnome-disks gnome-system-monitor xfce4-power-manager kaffeine
             xfce4-notifyd
            )

USAGE="USAGE:\n
\n\tmanjaro-package-installer [OPTION]
\n\nOPTIONS:\n
\n\t-h,--help     \t: this USAGE help
\n\t-i,--install  \t: Install checkmarked packages
\n\t-r,--remove   \t: Remove checkmarked packages
\n\t-s,--setup    \t: Default app, login, & WMs"



setup() {
    # Performs setup for installPkg
    # Can take args to add additional packages to list
    # Will ONLY add package if not already installed

    # add args to the list
    addPackage+=($@)
    unset packages

    # check if addPackage() is greater than 0
    if [ ${#addPackage[*]} -gt 0 ]; then
        packageList=(${packageList[*]} ${addPackage[*]})  # combine addPackage() + packageList()
        unset addPackage   # If package added unset array after
    fi

    # sort array
    IFS=$'\n' packageList=($(sort <<<"${packageList[*]}"))
    unset IFS

    # Creates $packages from packageList(), adding FALSE to each
    for package in ${packageList[*]}; do
        # only add package if not already installed
        if ! hash $package > /dev/null 2>&1; then
            packages="$packages FALSE $package"
        fi
    done

}


localPkgs() {
    # Query pacman for all local packages
    # create list from returned items
    # ignores some crucial packages but needs improvement

    unset pkgs
    installed=($(pacman -Qq))

    # generate $pkgs from $installed, adding FALSE to each
    for package in ${installed[*]}; do

        # check package against needed
        case $package in
            *lib*|*linux*|py*|gst*|x*|lz*|*dev*)
                continue  # don't add $package
                ;;
            *zip*|ca-*|alsa*|p*|open*|h*|bash*)
                continue
                ;;
            *net*|*usb*|*fs*|ip*|grub|gl*|vte*)
                continue
                ;;
            *gc*|*ucode*|*gtk*|cr*|sys*|*firm*)
                continue
                ;;
            *util*|atk*|git|*su*|fa*|ld*|lc*|la*)
                continue
                ;;
            *sdl*|*vi*|*efi*|*ex*|gs*|gp*|m*|gnu*)
                continue
                ;;
            re*|*lightdm*|curl|harf*|ja*|*way*)
                continue
                ;;
            *)
                pkgs="$pkgs FALSE $package"  # add $package
        esac
    done

}


removePkg() {
    # creates checkbox dialog of all installed packages,
    # if there are checkmarked packages when ok is pressed
    # they will be removed, otherwise the user is prompted

    while ! [[ $choice ]]; do

        # get $pkgs from localPkgs
        localPkgs

        # Run the selection dialog
        choice=$(zenity $WINICON --list --title="$TITLE" \
                        --text="<big>Choose Packages to be Removed</big>\n\n" \
                        --checklist --width=400 --height=500 --multiple \
                        --column="Select" --column="Packages" $pkgs \
                        --separator=" " \
                        $OK $CANCEL)

        if [[ $? == 1 ]]; then # cancel button
            exit 0

        else
            # check $choice is not none
            if ! [ ${#choice} -eq 0 ]; then
                num=1
                total=$(($(echo "${choice}" | awk -F" " '{print NF-1}')+1))

                for package in $choice; do
                    gksu "sudo pacman -Rns $package --noconfirm" | \
                        zenity --title="$TITLE" $WINICON --progress --pulsate \
                               --text="Removing $package...\n\n ${num}/$total" \
                               --auto-close --no-cancel --width=350 --height=150
                    sleep 1
                    num=$(($num+1))

                done
            else
                # choice was none
                none=$(zenity $WINICON --title="$TITLE" --question --width=300 \
                              --height=150 --ok-label="Yes" --cancel-label="No" \
                              --text="<big><b>No Packages Chosen</b></big>\n\nWant to go back?")

                if [[ $? == 1 ]]; then  # cancel button
                    exit 0
                else
                    unset choice
                    continue  # go back to package choice
                fi
            fi
        fi
    done

}




installPkg() {
    # creates checkbox dialog of packages from args passed and the default array,
    # if there are checkmarked packages when ok is pressed
    # they will be installed, otherwise the user is prompted

    while ! [[ $choice ]]; do

        # get $packages from setup
        setup

        # Run the selection dialog
        choice=$(zenity $WINICON --list --title="$TITLE" \
                        --text="<big>Choose Packages to be Installed</big>\n\n" \
                        --checklist --width=400 --height=500 --multiple \
                        --column="Select" --column="Packages" $packages \
                        --separator=" " \
                        $OK $CANCEL)

        if [[ $? == 1 ]]; then # cancel button
            exit 0

        else
            # check $choice is not none
            if ! [ ${#choice} -eq 0 ]; then
                num=1
                total=$(($(echo "${choice}" | awk -F" " '{print NF-1}')+1))

                # loop through $choice and install each $package
                for package in $choice; do
                    # Check if package can be installed with pacman
                    if pacman -Ss $package > /dev/null 2>&1; then
                        gksu "sudo pacman -S $package --needed --noconfirm" | \
                            zenity --title="$TITLE" $WINICON --progress --pulsate \
                                   --text="Installing $package...\n\n${num}/$total" \
                                   --auto-close --no-cancel --width=350 --height=150
                        sleep 1
                    else  # else use yaourt
                        termite --exec="yaourt -S $package --needed --noconfirm"
                        sleep 1
                    fi
                    num=$(($num+1))
                done


            else
                # choice was none
                none=$(zenity $WINICON --title="$TITLE" --question --width=300 \
                              --height=150 --ok-label="Yes" --cancel-label="No" \
                              --text="<big><b>No Packages Chosen</b></big>\n\nWant to go back?")

                if [[ $? == 1 ]]; then  # cancel button
                    exit 0
                else
                    unset choice
                    continue  # go back to package choice
                fi
            fi
        fi
    done

}




case $1 in
    -h|--help)
        echo -e $USAGE
        exit 0
        ;;
    -r|--remove)
        removePkg
        ;;
    -i|--install)
        installPkg
        ;;
    -s|--setup)
        echo -e "This option is not configured yet"
        exit 0
        ;;
    *)
        echo -e $USAGE
        exit 0
esac
