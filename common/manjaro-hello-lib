#!/usr/bin/env bash


# Library of functions required by manjaro-hello
# should be sourced first before anything else is done
# this file is not meant to be executable or run by itself

# paths
readonly BIN="/usr/bin"
readonly MENU="$HOME/.config/openbox/menu.xml"
readonly RC_PATH="$HOME/.config/openbox/rc.xml"
readonly AUTOSTART="$HOME/.config/openbox/autostart"
readonly HELPERS="$HOME/.config/xfce4/helpers.rc"
readonly MIMEAPP="$HOME/.config/mimeapps.list"
readonly CONF_PATH="$HOME/.config"
readonly LOG="$HOME/.manjaro-hello-log"

# hardware checks
readonly NV=$(grep -i "nvidia" <<< "$(lspci)")
readonly VM=$(grep -i "hypervisor" <<< "$(dmesg)")

# bash colour escapes
readonly BLUE='\E[1;34m'
readonly RED='\E[1;31m'
readonly GREEN='\E[1;32m'
readonly YELLOW='\E[1;33m'
readonly NORM='\E[0m'

draw_box() {
    local HZ="-" VT="|" CN="+"
    local H=${1:-12}                     # $1 Box Height
    local W=${2:-83}                     # $2 Box Width
    local R=${3:-2}                      # $3 Starting Row
    local C=${4:-5}                      # $4 Starting Column
    local CO=${5:-1}                     # $5 Box Color, 1 = red
    local Ht=$((H - 1)) Wt=$((W - 1))    # Account for the corners
    local Rp=$((R + Ht)) Cp=$((C + Wt))  # Account for start row & column
    echo -ne "\E[3${CO}m"                # Set the colour for foreground
    plot_char() { echo -e "\E[${1};${2}H""$3"; }
    local i=1
    for ((r=R; i<=Ht; r++)); do plot_char "$r" "$C"  "$VT"; i=$((i + 1)); done
    local i=1
    for ((r=R; i<=Ht; r++)); do plot_char "$r" "$Cp" "$VT"; i=$((i + 1)); done
    local i=1
    for ((c=C; i<=Wt; c++)); do plot_char "$R" "$c"  "$HZ"; i=$((i + 1)); done
    local i=1
    for ((c=C; i<=Wt; c++)); do plot_char "$Rp" "$c" "$HZ"; i=$((i + 1)); done
    plot_char "$R"  "$C" "$CN" ; plot_char "$R"  "$Cp" "$CN"
    plot_char "$Rp" "$C" "$CN" ; plot_char "$Rp" "$Cp" "$CN"
    tput sgr0  # Reset colours
}

create_Dialog() {
    clear ; local H
    case ${#get[@]} in
        7) H=23 ;;
        6) H=21 ;;
        5) H=19 ;;
        4) H=17 ;;
        3) H=15 ;;
        2) H=12 ;;
        *) H=8
    esac
    # greater than 1 list
    if [[ ${#get[@]} -gt 1 ]] || grep -q 'login session' <<< "$2"; then
        echo -e "\n\n\n\t$2\n"

        for ((n=1; n<=${#get[@]}; n++)); do
            echo -e "\n\t${BLUE}${n}${RED}) ${NORM}${get[$((n - 1))]}"
        done

        if grep -q 'login session' <<< "$2"; then
            echo -e "\n\t${BLUE}0${RED})${NORM} Openbox\t-  Skip this step and stay with Openbox"
            draw_box 12 ; printf "\n\n: "
        else
            echo -e "\n\t${BLUE}0${RED})${NORM}\t\t-  Skip This Step"
            draw_box $H ; printf "\n\n: "
        fi
    else
        # 1 or less list is yes/no
        printf "\n\n\n\t$2?  ${RED}[${BLUE}y${RED}/${BLUE}N${RED}]${NORM}: "
        if grep -q 'Nvidia' <<< "$2"; then
            draw_box $H ; tput cup 3 $((${#2} + 10))
        else
            draw_box $H ; tput cup 3 $((${#2} + 18))
        fi
    fi
    read -r "$1"  # take input

    if [[ ${#get[@]} -lt 2 ]] && ! grep -q 'session' <<< "$2"; then
        case ${!1} in
            y|Y|YES|yes|1)
                :  # No-op on success.. More code may go here in the future if needed
                ;;
            n|N|NO|no|0|"")
                clear; echo -e "\n\n\n\tSkipping.."
                draw_box 8 ; sleep 0.5
                ;;
            *)
                clear; echo -e "\n\n\n\tWrong Response
                \n\tTo skip this step enter ${RED}0 ${NORM}or ${RED}n${NORM} or just ${BLUE}[${RED}Enter${BLUE}]${NORM}"
                draw_box 8 ; sleep 3
                create_Dialog "$1" "$2"
        esac
    elif grep -q "[1-${#get[@]}]" <<< "${!1}"; then
        : # No-op on success..  In the future I intend to move more code here if needed
    elif grep -q '[nN0]' <<< "${!1}" || [[ "${!1}" = "" ]]; then
        clear; echo -e "\n\n\n\tSkipping.."
        draw_box 8 ; sleep 0.5
    else
        clear; echo -e "\n\n\n\tWrong Response
        \n\tTo skip this step enter ${RED}0 ${NORM}or ${RED}n${NORM} or just ${BLUE}[${RED}Enter${BLUE}]${NORM}$e_msg"
        draw_box 8 ; sleep 3
        create_Dialog "$1" "$2"
    fi
    # logging responses in a nice format
    echo -e "\nMain Question:\t$2\nPackage Array:\t${get[*]}\nTotal Options:\t${#get[@]}
Input Name:\t$1\nUser Answer:\t${!1}" >>"$LOG" 2>&1
    get=()
}

package_Operation() {
    clear
    # check our answer was yes for single item lists with "None" extras
    if grep -q "[yY1]" <<< "$1" && [[ "$2" == "None" ]]; then
        Pkgs+=("${install[@]}")

        # FIXME: Move this code to separate functions for each category
        if grep -q "obmenu" <<< "${install[@]}" && ! grep -q "switchmenu" $MENU; then
            echo -e "\nFixing Menu:\t$3" >>"$LOG" 2>&1
            sed -i '/manjaro-kb-pipemenu/ a\
        <item label="Switch Menu">\
            <action name="Execute">\
                <command>switchmenu -dynamic</command>\
            </action>\
        </item>' "$MENU"
        elif grep -q "pamac" <<< "${install[@]}" && grep -q "pacli" $MENU; then
            echo -en "\nFixing Menu:\t$3" >>$LOG 2>&1
            sed -i 's/termite --exec=pacli/pamac-manager/g' "$MENU"
        elif grep -q "steam" <<< "${install[@]}"; then
            KEY='8876CC8EDAEC52CEAB7742E778E2387015C1205F'
            sudo gpg --recv-keys $KEY
            sudo pacman-key -r $KEY
            sudo pacman-key --lsign-key $KEY
        elif grep -q "vlc" <<< "${install[@]}" && grep -q "mpv" "$MENU"; then
            echo -en "\nFixing Menu:\t$3" >>"$LOG" 2>&1
            sed -i 's/mpv --player-operation-mode=pseudo-gui/vlc/g' "$MENU"
        fi

    # Check if number of each choice from 1-n choices was entered
    elif grep -q "[1-${#install[@]}]" <<< "$1" && [[ ${#install[@]} -gt 1 ]]; then
        for ((n=1; n<=${#install[@]}; n++)); do
            y=$((n - 1))  # looping from 1 but indexing at 0

            if grep -q "$n" <<< "$1"; then
                Pkgs+=("${install[$y]}")

                # FIXME: switch to some form of loop or function call
                if grep -q "s-tui" <<< "${install[$y]}"; then
                    Pkgs+=("python2-psutil")
                elif grep -q "kdenlive" <<< "${install[$y]}"; then
                    Pkgs+=("kdebase-runtime" "dvdauthor" "frei0r-plugins" "breeze breeze-gtk" "breeze-icons")
                elif grep -q "urxvt" <<< "${install[$y]}"; then
                    Pkgs+=("urxvt-perls" "xclip")
                elif grep -q "nautilus" <<< "${install[$y]}"; then
                    Pkgs+=("nautilus-open-terminal")
                elif grep -q "nemo" <<< "${install[$y]}"; then
                    Pkgs+=("nemo-fileroller" "nemo-preview" "nemo-share")
                elif grep -q "mpd" <<< "${install[$y]}"; then
                    Pkgs+=("ncmpcpp" "mpc")
                elif grep -q "cairo-dock" <<< "${install[$y]}"; then
                    Pkgs+=("cairo-dock-plug-ins")
                elif grep -q "zathura" <<< "${install[$y]}"; then
                    Pkgs+=("zathura-pdf-poppler")
                elif grep -q "mupdf" <<< "${install[$y]}"; then
                    Pkgs+=("mupdf-tools" "libmupdf")
                elif grep -q "i3-gaps" <<< "${install[$y]}"; then
                    Pkgs+=("i3status" "perl-anyevent-i3")
                elif grep -q "xfce4" <<< "${install[$y]}"; then
                    Pkgs+=("pamac-aur" "xfce4-goodies" "xfce4-pulseaudio-plugin")
                elif grep -q "bspwm" <<< "${install[$y]}"; then
                    Pkgs+=("sxhkd")
                fi

                # FIXME: Move this code to separate functions for each category
                if grep -q '[yY1]' <<< "$2"; then
                    if grep -q "pcmanfm" <<< "${install[@]}"; then
                        echo -e "Fixing Menu:\t$3" >>"$LOG" 2>&1
                        rm -rf "$CONF_PATH/Thunar"
                        sed -i '/thunar/d' "$AUTOSTART"
                        sed -i "s/${3}/${install[$y]}/g" "$MENU" "$RC_PATH"
                        sed -i "s/Thunar/${install[$y]}/g" "$HELPERS"
                        if grep -q '1' <<< "$1"; then
                            sed -i "s/Thunar/pcmanfm/g" "$HELPERS"
                            sed -i "s/Thunar-folder-handler/pcmanfm/g" "$MIMEAPP"
                        elif grep -q '2' <<< "$1"; then
                            sed -i "s/Thunar/nautilus/g" "$HELPERS"
                            sed -i 's/Thunar-folder-handler/org.gnome.Nautilus/g' "$MIMEAPP"
                        elif grep -q '3' <<< "$1"; then
                            gsettings set org.nemo.desktop show-desktop-icons false
                            gsettings set org.cinnamon.desktop.default-applications.terminal exec termite
                            sed -i 's/Thunar-folder-handler/org.gnome.Nautilus/g' "$MIMEAPP"
                        fi
                    fi
                    if grep -q "atom" <<< "${install[@]}"; then
                        echo -e "Fixing Menu & Mimetypes: $3" >>"$LOG" 2>&1
                        rm -rf $CONF_PATH/geany
                        sed -i "s/${3}/${install[$y]}/g" "$MENU" "$RC_PATH"
                        if grep -q '2' <<< "$1"; then
                            sed -i "s/${3}/sublime_text_3/g" "$MIMEAPP"
                        elif grep -q '3' <<< "$1"; then
                            sed -i "s/${3}/emacs/g" "$MIMEAPP"
                        else
                            sed -i "s/${3}/${install[$y]}/g" "$MIMEAPP"
                        fi
                    fi
                    if grep -q "chromium" <<< "${install[@]}"; then
                        echo -e "Fixing Exo-Open:\t$3" >>$LOG 2>&1
                        rm -rf "$HOME/.mozilla"
                        sed -i 's/${3}/${install[$y]}/g' "$HELPERS" "$CONF_PATH/xfce4/manjaro-xfce-configs/helpers.rc"
                    fi
                    if grep -q "clementine" <<< "${install[@]}" && [[ $n -ge 3 ]]; then
                        echo -e "Fixing Menu:\t$3" >>"$LOG" 2>&1
                        sed -i "s/${3}/${install[$y]}/g" "$MENU" "$RC_PATH"
                    fi
                else
                    if grep -q "thunderbird" <<< "${install[@]}" && ! grep -q "MailReader" "$HELPERS"; then
                        echo -e "Fixing Exo-Open:\t$3" >>"$LOG" 2>&1
                        echo -e "MailReader=${install[$y]}" >> "$HELPERS"
                    fi
                fi
            fi
        done
    fi

    # If answer to remove was yes or if $2 is 'None'.. add $3 & $4 to removal list
    if grep -q '[yY1]' <<< "$1" || grep -q '[yY1]' <<< "$2"; then
        if ! grep -q "$3" <<< "${rPkgs[@]}" && [[ "$3" ]]; then
            rPkgs+=("$3")
            if [[ "$4" ]] && ! grep -q "$4" <<< "${rPkgs[@]}"; then
                rPkgs+=("$4")
            fi
        fi
    fi
    echo -e "\nIncoming:\t${install[*]}\nInstall Answer:\t$1\nRemove Answer:\t$2\nRemove/Change:\t$3" >>"$LOG" 2>&1
    # make sure the array is clean
    install=()
}

setup_swapfile() {
    if awk '/^Swap:/ {exit !$2}' <<< "$(free)"; then
        clear; echo -e "\n\n\n\t${GREEN}Swap already exists...\n\n\tskipping swap setup...${NORM}"
        draw_box 8 ; echo -e "\n\n"; sleep 2
    else
        create_Dialog swp "Would you like to setup a swapfile"
        if grep -q '[yY1]' <<< "$swp"; then
            create_Dialog cswp "Would you like to set a custom size"
            if grep -q '[yY1]' <<< "$cswp"; then
                echo -e "\n\n\n\tEnter the size of swap wanted 8192M or 8G for 8gb system
                \n\n\tM = Mebibytes, G = Gibibytes"
                draw_box 8 ; printf "\n\n: "; read -r size
            fi
        fi
    fi

    if grep -q '[yY1]' <<< "$swp" && grep -q '[yY1]' <<< "$cswp"; then
        if [[ -n $size ]]; then
            if grep '^[1-9][0-9]*M$' <<< "$size" || grep '^[1-9][0-9]*G$' <<< "$size"; then
                echo "checking size wasnt too big"
                if grep '^[1-9][0-9][0-9].*G$' <<< "$size" || grep '^[1-9][0-9][0-9][0-9][0-9][0-9].*M$' <<< "$size"; then
                    clear; echo -e "\n\n\n\tSize Too Big...\n\n\tAs a failsafe, no more than 999999M or 99G is allowed"
                    draw_box 8 ; sleep 1
                    read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
                    setup_swapfile
                else
                    sudo fallocate -l "$size" /swapfile && sudo chmod 600 /swapfile
                    sudo mkswap /swapfile && sudo swapon /swapfile
                    clear; echo -e "\n\n\tAppending to /ect/fstab\n"
                    echo "/swapfile                                 none           swap    defaults 0 0" | sudo tee -a /etc/fstab
                    echo -e "Set up Swapfile:\t$size" >>"$LOG" 2>&1
                fi
            else
                clear; echo -e "\n\n\n\tWrong Formatting...\n\n\tPlease make sure to end an upper case 'M' or 'G'"
                draw_box 8 ; sleep 1
                read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
                setup_swapfile
            fi
        else
            clear; echo -e "\n\n\tNo size entered"; sleep 2
            draw_box 8 ; sleep 1
            setup_swapfile
        fi
    elif grep -q '[yY1]' <<< "$swp"; then
        totalM="$(($(free --mega | awk '/^Mem:/{print $2}') + 50))M"
        sudo fallocate -l "$totalM" /swapfile && sudo chmod 600 /swapfile
        sudo mkswap /swapfile && sudo swapon /swapfile
        clear; echo -e "\n\n\tAppending to /ect/fstab\n"
        echo "/swapfile                                 none           swap    defaults 0 0" | sudo tee -a /etc/fstab
        echo -e "Set up Swapfile:\t$totalM" >>"$LOG" 2>&1
    else
        echo -e "Not Setting up Swapfile" >>"$LOG" 2>&1
    fi
}


setup_LTS_Kernel() {
    clear
    sudo pacman -S linux-lts --noconfirm
    if sudo pacman -Qsq virtualbox &>/dev/null; then
        sudo pacman -Rns virtualbox-guest-utils virtualbox-guest-modules-arch --noconfirm
        if [[ -e /etc/xdg/autostart/vboxclient.desktop ]]; then
            sudo rm -f /etc/xdg/autostart/vboxclient.desktop
        fi
    fi
    sudo pacman -R linux --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    clear; echo -e "\n\n\n\tLinux LTS Setup Complete\n\n\n\tPlease See: https://wiki.archlinux.org/index.php/Kernels"
    draw_box 8 ; sleep 1
    read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
    echo -e "\nLinux LTS Setup: $lts_kernel" >>"$LOG" 2>&1
}

setup_Bluetooth() {
    clear
    sudo pacman -S bluez bluez-utils pulseaudio-bluetooth bluez-firmware blueman --needed --noconfirm
    sudo modprobe btusb
    sudo systemctl enable bluetooth.service
    clear; echo -e "\n\n\n\tBluetooth Setup Complete\n\n\n\tPlease See: https://wiki.archlinux.org/index.php/bluetooth"
    draw_box 8 ; sleep 1
    read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
    echo -e "\nBluetooth Set Up: $btooth" >>"$LOG" 2>&1
}

setup_Printer() {
    clear
    sudo pacman -S cups cups-filters cups-pdf cups-pk-helper bluez-cups foomatic-db \
        foomatic-db-ppds system-config-printer gutenprint hplip ghostscript gsfonts \
        foomatic-db-gutenprint-ppds foomatic-db-nonfree-ppds --needed --noconfirm
    echo -e 'polkit.addRule(function(action, subject) {\n    if (action.id == "org.opensuse.cupspkhelper.mechanism.all-edit" &&
        subject.isInGroup("wheel")){
        return polkit.Result.YES;\n    }\n});' | sudo tee -a /etc/polkit-1/rules.d/49-allow-passwordless-printer-admin.rules
    sudo cups-genppdupdate
    sudo systemctl enable org.cups.cupsd.service
    clear; echo -e "\n\n\n\tPrinter Setup Complete\n\n\n\tPlease See: https://wiki.archlinux.org/index.php/CUPS"
    draw_box 8 ; sleep 1
    read -n1 -rsp $'\n\n\tPress Any Key to continue...\n\n'
    echo -e "\nPrinter Set Up: $printer" >>"$LOG" 2>&1
}
